// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/wipha26/app/ent/gender"
	"github.com/wipha26/app/ent/schema"
	"github.com/wipha26/app/ent/user"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	genderFields := schema.Gender{}.Fields()
	_ = genderFields
	// genderDescGender is the schema descriptor for gender field.
	genderDescGender := genderFields[0].Descriptor()
	// gender.GenderValidator is a validator for the "gender" field. It is called by the builders before save.
	gender.GenderValidator = genderDescGender.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescIdemployee is the schema descriptor for idemployee field.
	userDescIdemployee := userFields[1].Descriptor()
	// user.IdemployeeValidator is a validator for the "idemployee" field. It is called by the builders before save.
	user.IdemployeeValidator = func() func(string) error {
		validators := userDescIdemployee.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(idemployee string) error {
			for _, fn := range fns {
				if err := fn(idemployee); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
